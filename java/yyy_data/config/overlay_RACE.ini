[Meta]
# The data in this section is only for informational purposes
# and will not be used when the config is loaded.
# Modifications here may not change anything.
rfDynHUD_Version          = "1.2.0-Beta (build 91)"
Design_Resolution         = "1920x1200"
Design_Grid               = "(0,0;10,10)"

[Global]
useClassScoring           = false                      // Ignore vehicles from other classes than the viewed one for scoring?

[NamedColors]
ETVCaptionBackgroundColor = #787878
ETVCaptionFontColor       = #FFFFFF
ETVDataBackgroundColor    = #000000
ETVDataFontColor          = #FFFFFF
PositionItemColorLeader   = #FF0000C0
PositionItemColorMe       = #00FF00C0
PositionItemColorNextBehind = #FFFF00C0
PositionItemColorNextInFront = #0000FFC0
PositionItemColorNormal   = #FFFFFFC0
PositionItemFontColor     = #000000
StandardBackground        = #00000096
StandardFontColor         = #C0BC3D

[NamedFonts]
BiggerFont                = "Monospaced-BOLD-14va"
ETVFont                   = "Verdana-PLAIN-16va"
GearFont                  = "Monospaced-BOLD-26va"
PositionItemFont          = "Verdana-BOLD-9va"
SmallerFont               = "Monospaced-BOLD-9va"
StandardFont              = "Monospaced-BOLD-13va"
StandardFont2             = "Monospaced-BOLD-12va"
StandardFont3             = "Monospaced-BOLD-11va"

[BorderAliases]
StandardBorder            = "backgroundcolor_border.ini"

[Widget::StartingLightWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.startinglight.StartingLightWidget" // The Java class, that defines the Widget.
positioning               = TOP_LEFT                   // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 28.125%                    // The x-coordinate for the position.
y                         = 0.87890625%                // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 12.597656%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 9.277344%                  // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = false                      // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
offImageName              = "standard/starting_light_off.png" // The image name for the off-lights.
onImageName               = "standard/starting_light_on.png" // The image name for the on-lights.
numRows                   = 2                          // The number of light rows.
visibleTimeAfterLightsOff = 4.0                        // Amount of seconds, the Widget stays visible after all lights have gone off.

[Widget::MiscWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.misc.MiscWidget" // The Java class, that defines the Widget.
positioning               = TOP_CENTER                 // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.09765625%                // The x-coordinate for the position.
y                         = 11.328125%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 36.23047%                  // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 5.9570312%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
displayScoring            = true                       // Display the scoring part of the Widget?
displayTiming             = true                       // Display the timing part of the Widget?
displayVelocity           = false                      // Display the velocity and top speed part of the Widget?
relTopspeedResetDelay     = 10000                      // The delay after which the relative topspeed is resetted (in milliseconds).

[Widget::BrakeTempsWidget]
class                     = "net.ctdp.rfdynhud.widgets.standard.temperatures.TemperaturesWidget" // The Java class, that defines the Widget.
positioning               = TOP_RIGHT                  // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 18.554688%                 // The x-coordinate for the position.
y                         = 14.453125%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 17.773438%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 12.597656%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
font2                     = "SmallerFont"              // The used (smaller) font.
displayEngine             = false                      // Display the engine part of the Widget?
displayWaterTemp          = true                       // Display water temperature?
engineHeight              = 9.9609375%                 // The height of the engine bar.
displayTires              = false                      // Display the tire part of the Widget?
tireIcon                  = "standard/tire_small.png"  // The image name for the tire icon.
tireWidth                 = 9.863281%                  // The width of a tire image.
tireHeight                = 9.1796875%                 // The height of a tire image.
displayBrakes             = true                       // Display the brakes of the Widget?
brakeDiscIcon             = "standard/brake_disc_small.png" // The image name for the brake disc icon.
brakeWidth                = 6.7382812%                 // The width of a brake image.
brakeHeight               = 36.914062%                 // The height of a brake image.
brakeTempsPeakDelay       = 7000                       // (in milliseconds) If greater than 0, the brake temperatures will stay on their peek values after a turn for the chosen amount of milliseconds.

[Widget::TemperaturesWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.temperatures.TemperaturesWidget" // The Java class, that defines the Widget.
positioning               = TOP_RIGHT                  // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.5859375%                 // The x-coordinate for the position.
y                         = 14.453125%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 17.773438%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 12.597656%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
font2                     = "SmallerFont"              // The used (smaller) font.
displayEngine             = true                       // Display the engine part of the Widget?
displayWaterTemp          = false                      // Display water temperature?
engineHeight              = 9.9609375%                 // The height of the engine bar.
displayTires              = true                       // Display the tire part of the Widget?
tireIcon                  = "standard/tire_small.png"  // The image name for the tire icon.
tireWidth                 = 10.253906%                 // The width of a tire image.
tireHeight                = 29px                       // The height of a tire image.
displayBrakes             = false                      // Display the brakes of the Widget?
brakeDiscIcon             = "standard/brake_disc_small.png" // The image name for the brake disc icon.
brakeWidth                = 6.7382812%                 // The width of a brake image.
brakeHeight               = 38.964844%                 // The height of a brake image.
brakeTempsPeakDelay       = 7000                       // (in milliseconds) If greater than 0, the brake temperatures will stay on their peek values after a turn for the chosen amount of milliseconds.

[Widget::TimeCompareWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.timecomp.TimeCompareWidget" // The Java class, that defines the Widget.
positioning               = TOP_LEFT                   // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.48828125%                // The x-coordinate for the position.
y                         = 14.6484375%                // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 23.925781%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 14.0625%                   // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
abbreviate                = false                      // Whether to abbreviate "Sector" to "Sec", or not.
displaySectors            = true                       // Display sector times?

[Widget::ETVSessionStateWidget1]
class                     = "net.ctdp.rfdynhud.widgets.etv2010.sessionstate.ETVSessionStateWidget" // The Java class, that defines the Widget.
positioning               = TOP_CENTER                 // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.3125%                    // The x-coordinate for the position.
y                         = 18.416668%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 200px                      // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 2.5390625%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "N/A"                      // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:#00000000"          // The Widget's background (color or image).
font                      = "ETVFont"                  // The used font.
fontColor                 = "ETVDataFontColor"         // The Widget's font color in the format #RRGGBB (hex).
useImages                 = true                       // Whether to use images to render the items.
imagesIni                 = "etv2010/general/etv_2010_images.ini" // The ini file, that configures the background images.
captionBgColor            = "ETVCaptionBackgroundColor" // The background color for the "Lap" caption.
captionColor              = "ETVCaptionFontColor"      // The font color for the "Lap" caption.
dataBgColor               = "ETVDataBackgroundColor"   // The background color for the data fields.
itemGap                   = 3                          // The gap between the elements in pixels.
showNamesInAllUppercase   = true                       // Whether to display names in all upper case.
sessionLimitPreference    = LAPS                       // If a session is limited by both laps and time, this limit will be displayed.

[Widget::WearWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.wear.WearWidget" // The Java class, that defines the Widget.
positioning               = TOP_RIGHT                  // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.5859375%                 // The x-coordinate for the position.
y                         = 27.34375%                  // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 17.773438%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 24.414062%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
font2                     = "SmallerFont"              // The used (smaller) font.
displayEngine             = true                       // Display the engine part of the Widget?
engineHeight              = 5.6640625%                 // The height of the engine bar.
hundredPercentBase        = SAFE_RANGE                 // The value range to be used as 100% base.
displayWearPercent        = true                       // Display wear in percentage numbers?
engineEstimationImage     = "standard/start_finish.png" // Image to display where the engine is expected to explode.
engineFailImage           = "standard/explode.png"     // Image to display, if the engine WILL fail before the end of the race.
displayTires              = true                       // Display the tire part of the Widget?
displayCompoundName       = false                      // Display the tire compound name in the header?
tireIcon                  = "standard/tire_small.png"  // The image name for the tire icon.
tireWidth                 = 10.253906%                 // The width of a tire image.
tireHeight                = 11.71875%                  // The height of a tire image.
swapTireWearGripMeaning   = false                      // Swap bar and line display for wear and grip?
displayBrakes             = true                       // Display the brakes of the Widget?
brakeDiscIcon             = "standard/brake_disc_small.png" // The image name for the brake disc icon.
brakeWidth                = 6.7382812%                 // The width of a brake image.
brakeHeight               = 17.773438%                 // The height of a brake image.

[Widget::StandingsWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.standings.StandingsWidget" // The Java class, that defines the Widget.
positioning               = TOP_LEFT                   // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.48828125%                // The x-coordinate for the position.
y                         = 28.90625%                  // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 27.539062%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 14.941406%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "BiggerFont"               // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
fontColor_me              = "#367727"                  // The font color used for myself in the format #RRGGBB (hex).
fontColor_out             = "#646464"                  // The font color used for retired drivers in the format #RRGGBB (hex).
fontColor_finished        = "#00FF00"                  // The font color used for finished drivers in the format #RRGGBB (hex).
useAutoWidth              = true                       // Automatically compute and display the width?
initialView               = RELATIVE_TO_ME             // the initial kind of standings view. Valid values: RELATIVE_TO_LEADER, RELATIVE_TO_ME.
forceLeaderDisplayed      = true                       // Display leader regardless of maximum displayed drivers setting?
nameDisplayType           = FULL_NAME                  // How to display driver names.
showLapsOrStops           = true                       // Whether to show the number of laps or stops done or not.
abbreviate                = false                      // Whether to abbreviate "Stops", or not.
showTopspeeds             = false                      // Whether to show a topspeeds column or not.

[Widget::FuelWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.fuel.FuelWidget" // The Java class, that defines the Widget.
positioning               = TOP_RIGHT                  // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.5859375%                 // The x-coordinate for the position.
y                         = 51.953125%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 17.773438%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 13.4765625%                // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 4                          // top padding
paddingLeft               = 4                          // left padding
paddingRight              = 4                          // right padding
paddingBottom             = 4                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "StandardFont2"            // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
font2                     = "StandardFont3"            // The used (smaller) font.
displayFuelBar            = true                       // Render the fuel bar?
displayTankSize           = true                       // Display the tank size information?
displayFuelLoad           = true                       // Display fuel load information?
displayFuelWeight         = true                       // Display fuel weight information?
displayFuelLaps           = true                       // Display fuel load in laps?
displayFuelUsage          = true                       // Display fuel usage information?
displayPitstopInfo        = true                       // Display pitstop calculation information?
horizontalFuelBar         = false                      // Whether to render the fuel bar as a horizontal instead of a vertical bar.
fuelBarImage              = ""                         // An image to paint the fuel bar from.
fuelBarBackgroundColor    = "#000000"                  // The color used for the fuel bar's background.
fuelBarColor              = "#54760B"                  // The color used for the fuel bar.
tankSizeFont              = "Monospaced-PLAIN-9v"      // The used font for max fuel load (tank size).
fuelFont                  = "Monospaced-BOLD-13va"     // The used font for fuel load.
fuelFontColor             = "#FFFFFFCD"                // The color to use for fuel load in the format #RRGGBB (hex).
roundUpRemainingLaps      = true                       // Round up remaining fuel laps to include the current lap?
lowFuelWarningImageOff    = "standard/shiftlight_off.png" // Image name for the off-state of the low fuel warning.
lowFuelWarningImageOn     = "standard/shiftlight_on_red.png" // Image name for the on-state of the low fuel warning.
lowFuelWarningImagePositioning = TOP_RIGHT             // Positioning type for the low-fuel-warning image.
lowFuelWarningImagePositionX = 4px                     // X-position for the low-fuel-warning image.
lowFuelWarningImagePositionY = 4px                     // Y-position for the low-fuel-warning image.
lowFuelWarningImageHeight = 20.019531%                 // Height for the low-fuel-warning image.
lowFuelWarningLaps        = 1                          // Number of laps to start warning before out of fuel.
lowFuelBlinkTime          = 500                        // Blink time in milli seconds for low fuel warning (0 to disable).

[Widget::RevMeterWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.revmeter.RevMeterWidget" // The Java class, that defines the Widget.
positioning               = BOTTOM_CENTER              // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 24.902344%                 // The x-coordinate for the position.
y                         = 7.5195312%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 16.308594%                 // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 21.777344%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "N/A"                      // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "image:standard/rev_meter_bg.png" // The Widget's background (color or image).
font                      = "StandardFont"             // The used font.
fontColor                 = "StandardFontColor"        // The Widget's font color in the format #RRGGBB (hex).
minValue                  = -1.0E9                     // The minimum value accepted for the markers and needle
maxValue                  = 1.0E9                      // The maximum value accepted for the markers and needle
displayMarkers            = true                       // Display markers?
displayMarkerNumbers      = true                       // Display marker numbers?
markerNumbersInside       = false                      // Render marker numbers inside of the markers?
markersInnerRadius        = 224                        // The inner radius of the markers (in background image space)
markersLength             = 50                         // The length of the markers (in background image space)
markersOnCircle           = true                       // Draw markers on circle, even if the Widget has an aspect ratio unequal to 1.0
firstMarkerNumberOffset   = 0.0                        // The rotational offset in clockwise degrees for the first marker number.
lastMarkerNumberOffset    = 0.0                        // The rotational offset in clockwise degrees for the last marker number.
markersBigStep            = 1000                       // Step size of bigger rev markers
markersSmallStep          = 200                        // Step size of smaller rev markers
lastMarkerBig             = false                      // Whether to force the last marker to be treated as a big one.
markersColor              = "#FFFFFF"                  // The color used to draw the markers.
markersFont               = "Monospaced-BOLD-9va"      // The font used to draw the marker numbers.
markersFontColor          = "#FFFFFF"                  // The font color used to draw the marker numbers.
markersFontDropShadowColor= "#00000000"                // The font color for the marker numbers drop shadow.
markerNumbersCentered     = false                      // Draw marker numbers at their centers at an equal distance around needle mount?
useMaxRevLimit            = true                       // Whether to use maximum possible (by setup) rev limit
revMarkersMediumColor     = "#FFFF00"                  // The color used to draw the rev markers for medium boost.
revMarkersHighColor       = "#FF0000"                  // The color used to draw the rev markers for high revs.
fillHighBackground        = true                       // Fill the rev markers' background with medium and high color instead of coloring the markers.
interpolateMarkerColors   = false                      // Interpolate medium and high colors.
needleImageName           = "standard/rev_meter_needle.png" // The name of the needle image.
needleMountX              = -1                         // The x-offset in background image pixels to the needle mount (-1 for center).
needleMountY              = -1                         // The y-offset in background image pixels to the needle mount (-1 for center).
needlePivotBottomOffset   = 60                         // The offset in (unscaled) pixels from the bottom of the image, where the center of the needle's axis is.
needleRotationForMinValue = -122.4                     // The rotation for the needle image, that it has for min value (in degrees).
needleRotationForMaxValue = 118.8                      // The rotation for the needle image, that it has for max value (in degrees).
peakNeedleImageName       = "standard/rev_meter_needle.png" // The name of the peak needle image.
peakNeedlePivotBottomOffset = 60                       // The offset in (unscaled) pixels from the bottom of the image, where the center of the peak needle's axis is.
peakNeedleWaitTime        = 1000                       // The time in milliseconds to let the peak needle stay at the peak value.
peakNeedleCooldown        = 1000                       // The time in milliseconds, that the peak needle takes to go down from max RPM to zero.
peakNeedleDownshiftIgnoreTime = 1500                   // The time in milliseconds to ignore current revs after a downshift.
displayValue              = true                       // Display the digital value?
valueBackgroundImageName  = "standard/cyan_circle.png" // The name of the image to render behind the value number.
valuePosX                 = 100                        // The x-offset in pixels to the value label.
valuePosY                 = 100                        // The y-offset in pixels to the value label.
valueFont                 = "StandardFont"             // The font used to draw the value.
valueFontColor            = "#1A261C"                  // The font color used to draw the value.
hideWhenViewingOtherCar   = false                      // Hide the Widget when another car is being observed?
displayGear               = true                       // Display the gear?
gearBackgroundImageName   = ""                         // The name of the image to render behind the gear number.
gearPosX                  = 354                        // The x-offset in pixels to the gear label.
gearPosY                  = 512                        // The y-offset in pixels to the gear label.
gearFont                  = "GearFont"                 // The font used to draw the gear.
gearFontColor             = "#1A261C"                  // The font color used to draw the gear.
numShiftLights            = 2                          // The number of shift lights to render.
shiftLightImageNameOff1   = "standard/shiftlight_off.png" // The name of the shift light image for "off" state.
shiftLightImageNameOn1    = "standard/shiftlight_on_red.png" // The name of the shift light image for "on" state.
shiftLightPosX1           = 625                        // The x-offset in background image pixels for the shift light image.
shiftLightPosY1           = 42                         // The y-offset in background image pixels for the shift light image.
shiftLightHeight1         = 0                          // The height in background image pixels for the shift light image
shiftLightRPM1            = -200                       // The RPM (rounds per minute) to subtract from the maximum for the level to display shoft light on
shiftLightImageNameOff2   = "standard/shiftlight_off.png" // The name of the shift light image for "off" state.
shiftLightImageNameOn2    = "standard/shiftlight_on_orange.png" // The name of the shift light image for "on" state.
shiftLightPosX2           = 593                        // The x-offset in background image pixels for the shift light image.
shiftLightPosY2           = 42                         // The y-offset in background image pixels for the shift light image.
shiftLightHeight2         = 0                          // The height in background image pixels for the shift light image
shiftLightRPM2            = -600                       // The RPM (rounds per minute) to subtract from the maximum for the level to display shoft light on
displayBoostBar           = true                       // Display a graphical bar for engine boost mapping?
boostBarPosX              = 135                        // The x-position of the boost bar.
boostBarPosY              = 671                        // The y-position of the boost bar.
boostBarWidth             = 438                        // The width of the boost bar.
boostBarHeight            = 27                         // The height of the boost bar.
displayBoostNumber        = false                      // Display a number for engine boost mapping?
boostNumberBackgroundImageName = ""                    // The name of the image to render behind the boost number.
boostNumberPosX           = 392                        // The x-position of the boost number.
boostNumberPosY           = 544                        // The y-position of the boost number.
boostNumberFont           = "StandardFont"             // The font used to draw the boost number.
boostNumberFontColor      = "#FF0000"                  // The font color used to draw the boost bar.
displayRPMString1         = true                       // whether to display the digital RPM/Revs string or not
displayCurrRPM1           = true                       // whether to display the current revs or to hide them
displayMaxRPM1            = true                       // whether to display the maximum revs or to hide them
useBoostRevLimit1         = false                      // whether to use boost level to display max RPM
rpmPosX1                  = 170                        // The offset in (background image space) pixels from the right of the Widget, where the text is to be placed.
rpmPosY1                  = 603                        // The offset in (background image space) pixels from the top of the Widget, where the text is to be placed.
rpmFont1                  = "StandardFont"             // The font used to draw the RPM.
rpmFontColor1             = "StandardFontColor"        // The font color used to draw the RPM.
rpmJoinString1            = " / "                      // The String to use to join the current and max RPM.
displayRPMString2         = false                      // whether to display the digital RPM/Revs string or not
displayCurrRPM2           = true                       // whether to display the current revs or to hide them
displayMaxRPM2            = true                       // whether to display the maximum revs or to hide them
useBoostRevLimit2         = false                      // whether to use boost level to display max RPM
rpmPosX2                  = 170                        // The offset in (background image space) pixels from the right of the Widget, where the text is to be placed.
rpmPosY2                  = 603                        // The offset in (background image space) pixels from the top of the Widget, where the text is to be placed.
rpmFont2                  = "StandardFont"             // The font used to draw the RPM.
rpmFontColor2             = "StandardFontColor"        // The font color used to draw the RPM.
rpmJoinString2            = " / "                      // The String to use to join the current and max RPM.

[Widget::ControlsWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.controls.ControlsWidget" // The Java class, that defines the Widget.
positioning               = BOTTOM_LEFT                // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.0%                       // The x-coordinate for the position.
y                         = 6.5429688%                 // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 9.863281%                  // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 16.503906%                 // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 3                          // top padding
paddingLeft               = 3                          // left padding
paddingRight              = 3                          // right padding
paddingBottom             = 3                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "DokChampa-BOLD-22va"      // The used font.
fontColor                 = "#FFFFFF"                  // The Widget's font color in the format #RRGGBB (hex).
horizontalBars            = false                      // Extend the bars horizontally instead of vertically?
swapThrottleAndBrake      = false                      // Swap throttle and brake order?
displayClutch             = true                       // Display the clutch bar?
clutchImage               = ""                         // The image for the clutch bar. (overrules the color)
clutchColor               = "#0000FF"                  // The color used for the clutch bar in the format #RRGGBB (hex).
displayBrake              = true                       // Display the brake bar?
brakeImage                = ""                         // The image for the brake bar. (overrules the color)
brakeColor                = "#FF0000"                  // The color used for the brake bar in the format #RRGGBB (hex).
displayThrottle           = true                       // Display the throttle bar?
throttleImage             = ""                         // The image for the throttle bar. (overrules the color)
throttleColor             = "#00FF00"                  // The color used for the throttle bar in the format #RRGGBB (hex).
gap                       = 5                          // Gap between the bars
labelOffset               = 20                         // The offset for bar text from the left or bottom boundary of the bar.

[Widget::TrackPositionWidget1]
class                     = "net.ctdp.rfdynhud.widgets.standard.trackposition.TrackPositionWidget" // The Java class, that defines the Widget.
positioning               = BOTTOM_LEFT                // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                         = 0.0%                       // The x-coordinate for the position.
y                         = 0.0%                       // The y-coordinate for the position.
zIndex                    = 0                          // A z-index, to sort Widgets by.
width                     = 70.01953%                  // The width. Use negative values to make the Widget be sized relative to screen size.
height                    = 5.859375%                  // The height. Use negative values to make the Widget be sized relative to screen size.
border                    = "StandardBorder"           // The widget's border.
paddingTop                = 0                          // top padding
paddingLeft               = 0                          // left padding
paddingRight              = 0                          // right padding
paddingBottom             = 0                          // bottom padding
initialVisibility         = true                       // The initial visibility.
background                = "color:StandardBackground" // The Widget's background (color or image).
font                      = "PositionItemFont"         // The used font.
fontColor                 = "PositionItemFontColor"    // The Widget's font color in the format #RRGGBB (hex).
lineColor                 = "#FFFFFF"                  // Color for the base line.
itemRadius                = 9                          // The abstract radius for any displayed driver item.
markColorNormal           = "PositionItemColorNormal"  // The color used for all, but special cars in #RRGGBBAA (hex).
markColorLeader           = "PositionItemColorLeader"  // The color used for the leader's car in #RRGGBBAA (hex).
markColorMe               = "PositionItemColorMe"      // The color used for your own car in #RRGGBBAA (hex).
useMyColorForMe1st        = false                      // Use 'markColorMe' for my item when I am at 1st place?
markColorNextInFront      = "PositionItemColorNextInFront" // The color used for the car in front of you in #RRGGBBAA (hex).
markColorNextBehind       = "PositionItemColorNextBehind" // The color used for the car behind you in #RRGGBBAA (hex).
displayPosNumbers         = true                       // Display numbers on the position markers?
displayNameLabels         = false                      // Display name label near the position markers?
nameLabelPos              = BELOW                      // Positioning of the name labels.
nameLabelFont             = "PositionItemFont"         // Font for the name labels.
nameLabelFontColor        = "PositionItemColorNormal"  // Font color for the name labels.
